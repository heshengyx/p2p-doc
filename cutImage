
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="http://www.jq22.com/demo/cropper-master20160830/dist/cropper.min.css">
</head>
<body>
	<div class="avatar-upload">
                  <input class="avatar-src" name="avatar_src" type="hidden">
                  <input class="avatar-data" name="avatar_data" type="hidden">
                  <label for="avatarInput">Local upload</label>
                  <input class="avatar-input" id="avatarInput" name="avatar_file" type="file">
                </div>
	<div class="img-container">  
	    <img src="1.jpg" alt="">  
	</div>
	<button class="btn">提交</button><button class="view-btn">查看</button>
	<br />
	<img class="newImg" src="" style="display: none">
</body>
<script src="http://www.asheep.cn/demo/cropper/js/jquery.min.js"></script>
<script src="http://www.jq22.com/demo/cropper-master20160830/dist/cropper.min.js"></script>
<script>
$(function(){
	function convertToData(url, canvasdata, cropdata, callback) {  
	    var cropw = cropdata.width; // 剪切的宽  
	    var croph = cropdata.height; // 剪切的宽  
	    var imgw = canvasdata.width; // 图片缩放或则放大后的高  
	    var imgh = canvasdata.height; // 图片缩放或则放大后的高  
	      
	    var poleft = canvasdata.left - cropdata.left; // canvas定位图片的左边位置  
	    var potop = canvasdata.top - cropdata.top; // canvas定位图片的上边位置  
	      
	    var canvas = document.createElement("canvas");  
	    var ctx = canvas.getContext('2d');  
	      
	    canvas.width = cropw;  
	    canvas.height = croph;  
	      
	    var img = new Image();  
	    img.src = url;  
	      
	    img.onload = function() {  
	        this.width = imgw;  
	        this.height = imgh;  
	            // 这里主要是懂得canvas与图片的裁剪之间的关系位置  
	        ctx.drawImage(this, poleft, potop, this.width, this.height);  
	        var base64 = canvas.toDataURL('image/jpg', 1);  // 这里的“1”是指的是处理图片的清晰度（0-1）之间，当然越小图片越模糊，处理后的图片大小也就越小  
	        callback && callback(base64);      // 回调base64字符串  
	    }  
	}  
	//var $image = $('.img-container > img'); 
	  
	/*$image.on("load", function() {        // 等待图片加载成功后，才进行图片的裁剪功能  
	    $image.cropper({  
	        aspectRatio: 1 / 1  　　// 1：1的比例进行裁剪，可以是任意比例，自己调整  
	    });  
	})*/
	/*$image.cropper({  
        aspectRatio: 1 / 1  　　// 1：1的比例进行裁剪，可以是任意比例，自己调整  
    });*/

	$(".btn").on("click", function() { 
		var $image = $('.img-container > img'); 
	    var src = $image.eq(0).attr("src");  
	    var canvasdata = $image.cropper("getCanvasData");  
	    var cropBoxData = $image.cropper('getCropBoxData');  
	      
	    convertToData(src, canvasdata, cropBoxData, function(basechar) {  
	        // 回调后的函数处理  
	        //console.log(basechar);
	        $(".newImg").attr("src", basechar);      
	    });  
	});
	$('.view-btn').click(function() {
		var data = $('.newImg').attr('src');
		console.log(data);
	});

	$('#avatarInput').change(function() {
		var file;
		var files = $(this).prop('files');
		console.log(files.length);
		if (files.length > 0) {
          	file = files[0];

          	/*if (this.isImageFile(file)) {
            	if (this.url) {
              		URL.revokeObjectURL(this.url); // Revoke the old one
            	}

            	this.url = URL.createObjectURL(file);
            	this.startCropper();
          	}*/
          	var url = URL.createObjectURL(file);
          	console.log(url);
          	var $image = $('.img-container > img');
          	$image.attr('src', url);
          	$image.cropper({  
        		aspectRatio: 1 / 1  　　// 1：1的比例进行裁剪，可以是任意比例，自己调整  
    		});
        }
		//URL.createObjectURL(file);
	}); 
});
</script>
</html>
